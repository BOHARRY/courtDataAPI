// services/casePrecedentAnalysisService.js
import esClient from '../config/elasticsearch.js';
import { OpenAI } from 'openai';
import { OPENAI_API_KEY, OPENAI_MODEL_NAME_CHAT } from '../config/environment.js';
import admin from 'firebase-admin';

const openai = new OpenAI({
    apiKey: OPENAI_API_KEY,
});

const ES_INDEX_NAME = 'search-boooook';
const ANALYSIS_MODEL = OPENAI_MODEL_NAME_CHAT || 'gpt-4.1';

// Ë®òÊÜ∂È´îÁõ£ÊéßÂ∑•ÂÖ∑
const logMemoryUsage = (step) => {
    const used = process.memoryUsage();
    const heapUsedMB = Math.round(used.heapUsed / 1024 / 1024);
    const rssMB = Math.round(used.rss / 1024 / 1024);
    const externalMB = Math.round(used.external / 1024 / 1024);
    console.log(`[Memory-${step}] Heap: ${heapUsedMB}MB, RSS: ${rssMB}MB, External: ${externalMB}MB`);

    // Ë≠¶ÂëäË®òÊÜ∂È´î‰ΩøÁî®ÈÅéÈ´ò
    if (heapUsedMB > 400) {
        console.warn(`‚ö†Ô∏è [Memory Warning] Heap usage high: ${heapUsedMB}MB`);
    }
};

/**
 * Â∞áÁõ∏‰ººÂ∫¶ÈñÄÊ™ªËΩâÊèõÁÇ∫Êï∏ÂÄº
 * ES cosine similarity ÂàÜÊï∏ÁØÑÂúçÊòØ 0-1ÔºåÂÖ¨ÂºèÔºö(1 + cosine_similarity) / 2
 * Áî®Êà∂Ë®≠ÂÆöÁöÑÁôæÂàÜÊØîÈúÄË¶ÅËΩâÊèõÁÇ∫Â∞çÊáâÁöÑÂàÜÊï∏ÈñæÂÄº
 */
function getThresholdValue(threshold) {
    switch (threshold) {
        case 'low': return 0.6;    // 60% Áõ∏‰ººÂ∫¶
        case 'medium': return 0.75; // 75% Áõ∏‰ººÂ∫¶
        case 'high': return 0.85;   // 85% Áõ∏‰ººÂ∫¶
        default: return 0.75;
    }
}

/**
 * Â∞áÊ°à‰ª∂È°ûÂûãËΩâÊèõÁÇ∫ ES Êü•Ë©¢Ê¢ù‰ª∂
 */
function getCaseTypeFilter(caseType) {
    switch (caseType) {
        case 'Ê∞ë‰∫ã': return 'civil';
        case 'Âàë‰∫ã': return 'criminal';
        case 'Ë°åÊîø': return 'administrative';
        default: return 'civil';
    }
}

/**
 * Â∞áÊ≥ïÈô¢Â±§Á¥öËΩâÊèõÁÇ∫ ES Êü•Ë©¢Ê¢ù‰ª∂
 */
function getCourtLevelFilter(courtLevel) {
    switch (courtLevel) {
        case 'Âú∞ÊñπÊ≥ïÈô¢': return 'district';
        case 'È´òÁ≠âÊ≥ïÈô¢': return 'high';
        case 'ÊúÄÈ´òÊ≥ïÈô¢': return 'supreme';
        default: return 'district';
    }
}

/**
 * ‰ΩøÁî® OpenAI ÁîüÊàêÊ°à‰ª∂ÊèèËø∞ÁöÑÂêëÈáè
 */
async function generateEmbedding(text) {
    try {
        const response = await openai.embeddings.create({
            model: 'text-embedding-3-large',
            input: text,
            dimensions: 1536
        });
        return response.data[0].embedding;
    } catch (error) {
        console.error('[casePrecedentAnalysisService] ÁîüÊàêÂêëÈáèÂ§±Êïó:', error);
        throw new Error('ÁÑ°Ê≥ïÁîüÊàêÊ°à‰ª∂ÊèèËø∞ÁöÑÂêëÈáèË°®Á§∫');
    }
}

/**
 * üÜï ‰ΩøÁî® GPT-4o ÈÄ≤Ë°åÊ°à‰ª∂‰∫ãÁî±Ë£úË∂≥ËàáÂàÜÊûêÔºàÊàêÊú¨ÊéßÂà∂ÁâàÔºâ
 * ÈôêÂà∂ token ‰ΩøÁî®ÈáèÔºåÂ∞àÊ≥®ÊñºÂæãÂ∏´Ê†∏ÂøÉÈúÄÊ±Ç
 */
async function enrichCaseDescription(userInput) {
    try {
        console.log(`[casePrecedentAnalysisService] ‰ΩøÁî® GPT-4o Ë£úË∂≥Ê°à‰ª∂‰∫ãÁî±: "${userInput}"`);

        const prompt = `‰Ω†ÊòØË≥áÊ∑±Ê≥ïÂæãÂ∞àÂÆ∂„ÄÇË´ãÂàÜÊûê‰ª•‰∏ãÊ°à‰ª∂‰∫ãÁî±ÔºåÂæûÂõõÂÄãÁ∂≠Â∫¶Ë£úË∂≥ÊêúÂ∞ãËßíÂ∫¶Ôºö

Ê°à‰ª∂‰∫ãÁî±Ôºö„Äå${userInput}„Äç

Ë´ãÊèê‰æõÔºö
1. Ê≥ïÂæãË°ìË™ûÔºöÊ≠£ÂºèÊ≥ïÂæãÁî®Ë©ûÔºà1-2ÂÄãÁ≤æÊ∫ñË©ûÂΩôÔºâ
2. ÂØ¶ÂãôÁî®Ë©ûÔºöÂØ¶ÂãôÂ∏∏Áî®Ë°®ÈÅîÔºà1-2ÂÄãÂ∏∏Ë¶ãË™™Ê≥ïÔºâ
3. Áà≠ÈªûÂ∞éÂêëÔºöÂÖ∑È´îÊ≥ïÂæãÁà≠ÈªûÔºà1-2ÂÄãÊ†∏ÂøÉÁà≠ÈªûÔºâ

Ë¶ÅÊ±ÇÔºö
- ÊØèÂÄãÁ∂≠Â∫¶ÈôêÂà∂10Â≠óÂÖß
- ‰ΩøÁî®ÁπÅÈ´î‰∏≠Êñá
- ÈÅøÂÖçÈÅéÊñºÂØ¨Ê≥õÁöÑË©ûÂΩô

JSONÊ†ºÂºèÂõûÊáâÔºö
{
  "formalTerms": "Ê≠£ÂºèÊ≥ïÂæãË°ìË™û",
  "practicalTerms": "ÂØ¶ÂãôÂ∏∏Áî®Ë™™Ê≥ï",
  "specificIssues": "ÂÖ∑È´îÊ≥ïÂæãÁà≠Èªû"
}`;

        const response = await openai.chat.completions.create({
            model: "gpt-4o",
            messages: [{ role: "user", content: prompt }],
            max_tokens: 400, // üéØ Âö¥Ê†ºÊéßÂà∂ÊàêÊú¨
            temperature: 0.3,
            response_format: { type: "json_object" }
        });

        const enrichment = JSON.parse(response.choices[0].message.content);
        console.log(`[casePrecedentAnalysisService] ‰∫ãÁî±Ë£úË∂≥ÁµêÊûú:`, enrichment);
        return enrichment;

    } catch (error) {
        console.error('[casePrecedentAnalysisService] ‰∫ãÁî±Ë£úË∂≥Â§±Êïó:', error);
        // ÈôçÁ¥öÁ≠ñÁï•ÔºöËøîÂõûÂü∫Êú¨ÁµêÊßã
        return {
            formalTerms: userInput,
            practicalTerms: userInput,
            specificIssues: userInput
        };
    }
}

/**
 * üÜï ÁîüÊàêÂõõËßíÂ∫¶ÊêúÂ∞ãÁ≠ñÁï•
 */
function generateSearchAngles(userInput, enrichment) {
    return {
        Ê†∏ÂøÉÊ¶ÇÂøµ: {
            query: userInput,
            weight: 0.4,
            purpose: "‰øùÊåÅÁî®Êà∂ÂéüÂßãË°®ÈÅî",
            displayName: "Ê†∏ÂøÉÊ¶ÇÂøµ"
        },
        Ê≥ïÂæãË°ìË™û: {
            query: enrichment.formalTerms || userInput,
            weight: 0.3,
            purpose: "Ê≠£ÂºèÊ≥ïÂæãÁî®Ë©û",
            displayName: "Ê≥ïÂæãË°ìË™û"
        },
        ÂØ¶ÂãôÁî®Ë©û: {
            query: enrichment.practicalTerms || userInput,
            weight: 0.2,
            purpose: "ÂØ¶ÂãôÂ∏∏Áî®Ë°®ÈÅî",
            displayName: "ÂØ¶ÂãôÁî®Ë©û"
        },
        Áà≠ÈªûÂ∞éÂêë: {
            query: enrichment.specificIssues || userInput,
            weight: 0.1,
            purpose: "ÂÖ∑È´îÁà≠ÈªûËßíÂ∫¶",
            displayName: "Áà≠ÈªûÂ∞éÂêë"
        }
    };
}

/**
 * üÜï Âü∑Ë°åÂ§öËßíÂ∫¶‰∏¶Ë°åË™ûÊÑèÊêúÂ∞ã
 */
async function performMultiAngleSearch(searchAngles, courtLevel, caseType, threshold) {
    try {
        console.log(`[casePrecedentAnalysisService] ÈñãÂßãÂ§öËßíÂ∫¶‰∏¶Ë°åÊêúÂ∞ãÔºåÂÖ± ${Object.keys(searchAngles).length} ÂÄãËßíÂ∫¶`);

        const minScore = getThresholdValue(threshold);

        // ‰∏¶Ë°åÂü∑Ë°åÊâÄÊúâËßíÂ∫¶ÁöÑÊêúÂ∞ã
        const searchPromises = Object.entries(searchAngles).map(async ([angleName, config]) => {
            try {
                console.log(`[casePrecedentAnalysisService] Âü∑Ë°åËßíÂ∫¶„Äå${angleName}„ÄçÊêúÂ∞ã: "${config.query}"`);

                // ÁîüÊàêË©≤ËßíÂ∫¶ÁöÑÊü•Ë©¢ÂêëÈáè
                const queryVector = await generateEmbedding(config.query);

                // ÊßãÂª∫ KNN Êü•Ë©¢
                const knnQuery = {
                    field: "text_embedding",
                    query_vector: queryVector,
                    k: 25, // ÊØèÂÄãËßíÂ∫¶ÊêúÂ∞ã25Á≠ÜÔºåÁ∏ΩÂÖ±ÊúÄÂ§ö100Á≠Ü
                    num_candidates: 50
                };

                const response = await esClient.search({
                    index: ES_INDEX_NAME,
                    knn: knnQuery,
                    _source: [
                        'JID', 'JTITLE', 'verdict_type', 'court', 'JYEAR'
                    ],
                    size: 25,
                    timeout: '20s'
                });

                const hits = response.hits?.hits || [];
                console.log(`[casePrecedentAnalysisService] ËßíÂ∫¶„Äå${angleName}„ÄçËøîÂõû ${hits.length} ÂÄãÁµêÊûú`);

                // ÁØ©ÈÅ∏‰∏¶Ê®ôË®ò‰æÜÊ∫êËßíÂ∫¶
                const filteredResults = hits
                    .filter(hit => (hit._score || 0) >= minScore)
                    .map(hit => ({
                        id: hit._source?.JID || 'unknown',
                        title: hit._source?.JTITLE || 'ÁÑ°Ê®ôÈ°å',
                        verdictType: hit._source?.verdict_type || 'unknown',
                        court: hit._source?.court || 'Êú™Áü•Ê≥ïÈô¢',
                        year: hit._source?.JYEAR || 'Êú™Áü•Âπ¥‰ªΩ',
                        similarity: hit._score || 0,
                        sourceAngle: angleName,
                        angleWeight: config.weight,
                        originalSimilarity: hit._score || 0
                    }));

                return {
                    angleName,
                    config,
                    results: filteredResults,
                    success: true,
                    resultCount: filteredResults.length
                };

            } catch (error) {
                console.error(`[casePrecedentAnalysisService] ËßíÂ∫¶„Äå${angleName}„ÄçÊêúÂ∞ãÂ§±Êïó:`, error);
                return {
                    angleName,
                    config,
                    results: [],
                    success: false,
                    error: error.message,
                    resultCount: 0
                };
            }
        });

        // Á≠âÂæÖÊâÄÊúâÊêúÂ∞ãÂÆåÊàê
        const searchResults = await Promise.all(searchPromises);

        // Áµ±Ë®àÊàêÂäüÁöÑÊêúÂ∞ã
        const successfulResults = searchResults.filter(r => r.success);
        const totalResults = successfulResults.reduce((sum, r) => sum + r.resultCount, 0);

        console.log(`[casePrecedentAnalysisService] Â§öËßíÂ∫¶ÊêúÂ∞ãÂÆåÊàê: ${successfulResults.length}/${searchResults.length} ÊàêÂäüÔºåÂÖ± ${totalResults} ÂÄãÁµêÊûú`);

        if (successfulResults.length === 0) {
            throw new Error('ÊâÄÊúâÊêúÂ∞ãËßíÂ∫¶ÈÉΩÂ§±Êïó');
        }

        return searchResults;

    } catch (error) {
        console.error('[casePrecedentAnalysisService] Â§öËßíÂ∫¶ÊêúÂ∞ãÂ§±Êïó:', error);
        throw error;
    }
}

/**
 * üÜï Ê∑∑ÂêàÊô∫ËÉΩÂêà‰ΩµÁ≠ñÁï•ÔºàÁ¨¨‰∫åÈöéÊÆµÔºöÂæãÂ∏´ÂÉπÂÄºÂÑ™ÂåñÔºâ
 */
function mergeMultiAngleResults(searchResults, userInput) {
    try {
        console.log(`[casePrecedentAnalysisService] üß† ÈñãÂßãÊ∑∑ÂêàÊô∫ËÉΩÂêà‰ΩµÂ§öËßíÂ∫¶ÊêúÂ∞ãÁµêÊûú`);

        const caseMap = new Map();
        let totalProcessed = 0;

        // Êî∂ÈõÜÊâÄÊúâÊàêÂäüÁöÑÊêúÂ∞ãÁµêÊûú
        searchResults.forEach(angleResult => {
            if (!angleResult.success) return;

            angleResult.results.forEach((caseItem, index) => {
                const caseId = caseItem.id;
                const positionScore = (25 - index) / 25; // ‰ΩçÁΩÆÂä†ÂàÜ
                const weightedScore = caseItem.similarity * angleResult.config.weight * positionScore;

                totalProcessed++;

                if (!caseMap.has(caseId)) {
                    caseMap.set(caseId, {
                        case: caseItem,
                        appearances: 0,
                        sourceAngles: [],
                        angleScores: {},
                        totalScore: 0,
                        maxSimilarity: 0,
                        isIntersection: false,
                        // üÜï ÂæãÂ∏´ÂÉπÂÄºË©ï‰º∞
                        lawyerValue: {
                            relevanceScore: 0,
                            diversityBonus: 0,
                            practicalValue: 0
                        }
                    });
                }

                const existing = caseMap.get(caseId);
                existing.appearances++;
                existing.sourceAngles.push(angleResult.angleName);
                existing.angleScores[angleResult.angleName] = weightedScore;
                existing.totalScore += weightedScore;
                existing.maxSimilarity = Math.max(existing.maxSimilarity, caseItem.similarity);
                existing.isIntersection = existing.appearances >= 2;
            });
        });

        // üÜï Ë®àÁÆóÂæãÂ∏´ÂÉπÂÄºË©ïÂàÜ
        const casesWithValue = Array.from(caseMap.values()).map(item => {
            const lawyerValue = calculateLawyerValue(item, userInput);
            return {
                ...item,
                lawyerValue,
                finalScore: calculateFinalScore(item, lawyerValue)
            };
        });

        // üÜï Ê∑∑ÂêàÊô∫ËÉΩÊéíÂ∫èÁ≠ñÁï•
        const sortedResults = casesWithValue.sort((a, b) => {
            // 1. ÂÑ™ÂÖàÈ´òÂÉπÂÄºÊ°à‰æãÔºàÂ§öËßíÂ∫¶ÂëΩ‰∏≠ + ÂæãÂ∏´ÂÉπÂÄºÔºâ
            if (a.isIntersection !== b.isIntersection) {
                return b.isIntersection - a.isIntersection;
            }

            // 2. ÂæãÂ∏´ÂÉπÂÄºË©ïÂàÜ
            if (Math.abs(b.finalScore - a.finalScore) > 0.05) {
                return b.finalScore - a.finalScore;
            }

            // 3. Â§öËßíÂ∫¶Âá∫ÁèæÊ¨°Êï∏
            if (b.appearances !== a.appearances) {
                return b.appearances - a.appearances;
            }

            // 4. ÊúÄÈ´òÁõ∏‰ººÂ∫¶
            return b.maxSimilarity - a.maxSimilarity;
        }).slice(0, 50);

        console.log(`[casePrecedentAnalysisService] üéØ Êô∫ËÉΩÂêà‰ΩµÂÆåÊàê: ËôïÁêÜ ${totalProcessed} ÂÄãÁµêÊûúÔºåÂÑ™ÂåñÂæå ${sortedResults.length} ÂÄã`);
        console.log(`[casePrecedentAnalysisService] üìä È´òÂÉπÂÄºÊ°à‰æã: ${sortedResults.filter(r => r.isIntersection).length} ÂÄãÂ§öËßíÂ∫¶ÂëΩ‰∏≠`);

        return sortedResults.map(item => ({
            id: item.case.id,
            title: item.case.title,
            verdictType: item.case.verdictType,
            court: item.case.court,
            year: item.case.year,
            similarity: item.maxSimilarity,
            // üÜï Â¢ûÂº∑ÁöÑÂ§öËßíÂ∫¶ÂàÜÊûêÊï∏Êìö
            multiAngleData: {
                appearances: item.appearances,
                sourceAngles: item.sourceAngles,
                totalScore: item.totalScore,
                isIntersection: item.isIntersection,
                angleScores: item.angleScores,
                // üÜï ÂæãÂ∏´ÂÉπÂÄºÊï∏Êìö
                lawyerValue: item.lawyerValue,
                finalScore: item.finalScore,
                recommendationReason: generateRecommendationReason(item)
            }
        }));

    } catch (error) {
        console.error('[casePrecedentAnalysisService] ÁµêÊûúÂêà‰ΩµÂ§±Êïó:', error);
        throw error;
    }
}

/**
 * üÜï Ë®àÁÆóÂæãÂ∏´ÂÉπÂÄºË©ïÂàÜ
 */
function calculateLawyerValue(caseItem, userInput) {
    // 1. Áõ∏ÈóúÊÄßË©ïÂàÜÔºàÂü∫ÊñºÁõ∏‰ººÂ∫¶ÂíåÂ§öËßíÂ∫¶ÂëΩ‰∏≠Ôºâ
    const relevanceScore = caseItem.maxSimilarity * (caseItem.isIntersection ? 1.2 : 1.0);

    // 2. Â§öÊ®£ÊÄßÂä†ÂàÜÔºà‰∏çÂêåËßíÂ∫¶ÁôºÁèæÁöÑÊ°à‰æãÊõ¥ÊúâÂÉπÂÄºÔºâ
    const diversityBonus = Math.min(caseItem.appearances * 0.1, 0.3);

    // 3. ÂØ¶ÂãôÂÉπÂÄºË©ïÂàÜÔºàÂü∫ÊñºÂà§Ê±∫È°ûÂûãÂíåÊ≥ïÈô¢Â±§Á¥öÔºâ
    let practicalValue = 0.5; // Âü∫Á§éÂàÜ

    // ÂãùË®¥Ê°à‰æãÂä†ÂàÜ
    if (caseItem.case.verdictType?.includes('ÂãùË®¥') || caseItem.case.verdictType?.includes('ÂáÜË®±')) {
        practicalValue += 0.2;
    }

    // È´òÁ≠âÊ≥ïÈô¢‰ª•‰∏äÊ°à‰æãÂä†ÂàÜ
    if (caseItem.case.court?.includes('È´òÁ≠â') || caseItem.case.court?.includes('ÊúÄÈ´ò')) {
        practicalValue += 0.15;
    }

    // ËøëÊúüÊ°à‰æãÂä†ÂàÜ
    const currentYear = new Date().getFullYear();
    const caseYear = parseInt(caseItem.case.year) || 0;
    if (currentYear - caseYear <= 3) {
        practicalValue += 0.1;
    }

    return {
        relevanceScore: Math.min(relevanceScore, 1.0),
        diversityBonus: diversityBonus,
        practicalValue: Math.min(practicalValue, 1.0)
    };
}

/**
 * üÜï Ë®àÁÆóÊúÄÁµÇË©ïÂàÜ
 */
function calculateFinalScore(caseItem, lawyerValue) {
    const weights = {
        relevance: 0.5,    // Áõ∏ÈóúÊÄßÊ¨äÈáç 50%
        diversity: 0.2,    // Â§öÊ®£ÊÄßÊ¨äÈáç 20%
        practical: 0.3     // ÂØ¶ÂãôÂÉπÂÄºÊ¨äÈáç 30%
    };

    return (
        lawyerValue.relevanceScore * weights.relevance +
        lawyerValue.diversityBonus * weights.diversity +
        lawyerValue.practicalValue * weights.practical
    );
}

/**
 * üÜï ÁîüÊàêÊé®Ëñ¶ÁêÜÁî±
 */
function generateRecommendationReason(caseItem) {
    const reasons = [];

    if (caseItem.isIntersection) {
        reasons.push(`Â§öËßíÂ∫¶ÂëΩ‰∏≠ (${caseItem.appearances}ÂÄãËßíÂ∫¶ÁôºÁèæ)`);
    }

    if (caseItem.maxSimilarity >= 0.85) {
        reasons.push('È´òÂ∫¶Áõ∏Èóú');
    } else if (caseItem.maxSimilarity >= 0.75) {
        reasons.push('Áõ∏ÈóúÊÄßËâØÂ•Ω');
    }

    if (caseItem.case.verdictType?.includes('ÂãùË®¥')) {
        reasons.push('ÂãùË®¥Ê°à‰æã');
    }

    if (caseItem.case.court?.includes('È´òÁ≠â') || caseItem.case.court?.includes('ÊúÄÈ´ò')) {
        reasons.push('È´òÂ±§Á¥öÊ≥ïÈô¢');
    }

    const currentYear = new Date().getFullYear();
    const caseYear = parseInt(caseItem.case.year) || 0;
    if (currentYear - caseYear <= 2) {
        reasons.push('ËøëÊúüÊ°à‰æã');
    }

    if (caseItem.sourceAngles.length >= 3) {
        reasons.push('Â§öÁ∂≠Â∫¶ÂåπÈÖç');
    }

    return reasons.length > 0 ? reasons.join('„ÄÅ') : 'Âü∫Á§éÁõ∏Èóú';
}

/**
 * üÜï ÁîüÊàêÊô∫ËÉΩÊé®Ëñ¶Âª∫Ë≠∞
 */
function generateSmartRecommendations(similarCases, coverageStats, verdictAnalysis, multiAngleResults, userInput) {
    try {
        console.log(`[casePrecedentAnalysisService] üß† ÁîüÊàêÊô∫ËÉΩÊé®Ëñ¶Âª∫Ë≠∞`);

        const recommendations = {
            topRecommendation: '',
            nextSteps: [],
            strategicInsights: [],
            riskWarnings: []
        };

        // 1. Âü∫ÊñºÂ§öËßíÂ∫¶ÊêúÂ∞ãÊïàÊûúÁöÑÊé®Ëñ¶
        if (coverageStats.intersectionCases >= 5) {
            recommendations.topRecommendation = `ÁôºÁèæ ${coverageStats.intersectionCases} ÂÄãÈ´òÂ∫¶Áõ∏ÈóúÊ°à‰æãÔºåÂª∫Ë≠∞ÈáçÈªûÁ†îÁ©∂ÈÄô‰∫õÂ§öËßíÂ∫¶ÂëΩ‰∏≠ÁöÑÊ°à‰æãÔºåÂÆÉÂÄëÊúÄËÉΩ‰ª£Ë°®ÊÇ®Ê°à‰ª∂ÁöÑÊ†∏ÂøÉÁâπÂæµ„ÄÇ`;
        } else if (coverageStats.intersectionCases >= 2) {
            recommendations.topRecommendation = `ÁôºÁèæ ${coverageStats.intersectionCases} ÂÄãÈ´òÂ∫¶Áõ∏ÈóúÊ°à‰æãÔºåÂª∫Ë≠∞Ê∑±ÂÖ•ÂàÜÊûêÈÄô‰∫õÊ°à‰æãÁöÑÂÖ±ÂêåÈªûÂíåÂ∑ÆÁï∞„ÄÇ`;
        } else {
            recommendations.topRecommendation = `Â§öËßíÂ∫¶ÊêúÂ∞ãÁôºÁèæ‰∫Ü‰∏çÂêåÈù¢ÂêëÁöÑÁõ∏ÈóúÊ°à‰æãÔºåÂª∫Ë≠∞ÂæûÂêÑÂÄãËßíÂ∫¶Á∂úÂêàÂàÜÊûê‰ª•Áç≤ÂæóÂÖ®Èù¢Ë¶ñËßí„ÄÇ`;
        }

        // 2. Âü∫ÊñºÂà§Ê±∫ÂÇæÂêëÁöÑÁ≠ñÁï•Âª∫Ë≠∞
        const mainVerdict = verdictAnalysis.mainPattern.verdict;
        const mainPercentage = verdictAnalysis.mainPattern.percentage;

        if (mainPercentage >= 70) {
            if (mainVerdict.includes('ÂãùË®¥') || mainVerdict.includes('ÂáÜË®±')) {
                recommendations.nextSteps.push('‰∏ªÊµÅÂà§Ê±∫ÂÇæÂêëÊúâÂà©ÔºåÂª∫Ë≠∞ÂèÉËÄÉÊàêÂäüÊ°à‰æãÁöÑË´ñË≠âÁ≠ñÁï•');
                recommendations.nextSteps.push('ÈáçÈªûÂàÜÊûêÂãùË®¥Ê°à‰æãÁöÑË≠âÊìöÁµÑÁπîÂíåÊ≥ïÂæãÈÅ©Áî®ÊñπÂºè');
            } else {
                recommendations.nextSteps.push('‰∏ªÊµÅÂà§Ê±∫ÂÇæÂêë‰∏çÂà©ÔºåÂª∫Ë≠∞Â∞ãÊâæÁï∞Â∏∏ÊàêÂäüÊ°à‰æãÁöÑÁ™ÅÁ†¥Èªû');
                recommendations.riskWarnings.push('ÈúÄË¶ÅÁâπÂà•Ê≥®ÊÑèÂ∏∏Ë¶ãÁöÑÊïóË®¥ÂéüÂõ†‰∏¶ÊèêÂâçÊ∫ñÂÇôÊáâÂ∞çÁ≠ñÁï•');
            }
        } else if (mainPercentage >= 50) {
            recommendations.nextSteps.push('Âà§Ê±∫ÁµêÊûúÂàÜÊ≠ßËºÉÂ§ßÔºåÂª∫Ë≠∞Ê∑±ÂÖ•ÂàÜÊûêÂΩ±ÈüøÂà§Ê±∫ÁöÑÈóúÈçµÂõ†Á¥†');
            recommendations.nextSteps.push('Ê∫ñÂÇôÂ§öÂ•óË´ñË≠âÁ≠ñÁï•‰ª•ÊáâÂ∞ç‰∏çÂêåÁöÑÂØ©ÁêÜÈáçÈªû');
        } else {
            recommendations.nextSteps.push('Âà§Ê±∫ÁµêÊûúÈ´òÂ∫¶ÂàÜÊ≠ßÔºåÂª∫Ë≠∞ÂÖ®Èù¢ÂàÜÊûêÂêÑÁ®ÆÂèØËÉΩÁöÑÂà§Ê±∫Ë∑ØÂæë');
            recommendations.riskWarnings.push('Ê°à‰ª∂ÁµêÊûú‰∏çÁ¢∫ÂÆöÊÄßËºÉÈ´òÔºåÂª∫Ë≠∞ËÄÉÊÖÆÂíåËß£Á≠âÊõø‰ª£ÊñπÊ°à');
        }

        // 3. Âü∫ÊñºÊêúÂ∞ãËßíÂ∫¶ÊïàÊûúÁöÑÂª∫Ë≠∞
        const mostEffectiveAngle = multiAngleResults
            .filter(r => r.success)
            .sort((a, b) => (b.resultCount || 0) - (a.resultCount || 0))[0];

        if (mostEffectiveAngle) {
            recommendations.strategicInsights.push(
                `„Äå${mostEffectiveAngle.config.displayName}„ÄçËßíÂ∫¶ÁôºÁèæÊúÄÂ§öÁõ∏ÈóúÊ°à‰æãÔºåÂª∫Ë≠∞ÂæûÊ≠§ËßíÂ∫¶Ê∑±ÂåñË´ñË≠â`
            );
        }

        // 4. Âü∫ÊñºÊ°à‰æãË≥™ÈáèÁöÑÂª∫Ë≠∞
        const highValueCases = similarCases.filter(c =>
            c.multiAngleData?.isIntersection && c.multiAngleData?.finalScore > 0.7
        );

        if (highValueCases.length >= 3) {
            recommendations.nextSteps.push(`ÂÑ™ÂÖàÁ†îÁ©∂ ${highValueCases.length} ÂÄãÈ´òÂÉπÂÄºÊ°à‰æãÁöÑÂà§Ê±∫ÁêÜÁî±Âíå‰∫ãÂØ¶Ë™çÂÆö`);
        }

        // 5. Âü∫ÊñºÁï∞Â∏∏Ê°à‰æãÁöÑÈ¢®Èö™ÊèêÁ§∫
        if (verdictAnalysis.anomalies.length > 0) {
            recommendations.riskWarnings.push('ÁôºÁèæÁï∞Â∏∏Âà§Ê±∫Ê®°ÂºèÔºåÂª∫Ë≠∞ÂàÜÊûêÈÄô‰∫õÊ°à‰æãÁöÑÁâπÊÆäÊÉÖÊ≥Å‰ª•ÈÅøÂÖçÈ°û‰ººÈ¢®Èö™');
        }

        // 6. ÂØ¶ÂãôÊìç‰ΩúÂª∫Ë≠∞
        recommendations.nextSteps.push('Âª∫Ë≠∞‰ΩøÁî®„ÄåÊ≠∏Á¥ç‰∏ªÊµÅÂà§Ê±∫„ÄçÂäüËÉΩÈÄ≤‰∏ÄÊ≠•ÂàÜÊûêÊàêÂäüË¶ÅÁ¥†');

        if (similarCases.length >= 30) {
            recommendations.nextSteps.push('Ê®£Êú¨Êï∏ÈáèÂÖÖË∂≥ÔºåÂàÜÊûêÁµêÊûúÂÖ∑ÊúâÁµ±Ë®àÊÑèÁæ©');
        } else {
            recommendations.riskWarnings.push('Ê®£Êú¨Êï∏ÈáèËºÉÂ∞ëÔºåÂª∫Ë≠∞Êì¥Â§ßÊêúÂ∞ãÁØÑÂúçÊàñË™øÊï¥ÈóúÈçµË©û');
        }

        console.log(`[casePrecedentAnalysisService] üéØ Êô∫ËÉΩÊé®Ëñ¶ÁîüÊàêÂÆåÊàê:`, recommendations);
        return recommendations;

    } catch (error) {
        console.error('[casePrecedentAnalysisService] Êô∫ËÉΩÊé®Ëñ¶ÁîüÊàêÂ§±Êïó:', error);
        return {
            topRecommendation: 'Âª∫Ë≠∞Ê∑±ÂÖ•ÂàÜÊûêÁôºÁèæÁöÑÁõ∏ÈóúÊ°à‰æãÔºåÈáçÈªûÈóúÊ≥®Âà§Ê±∫ÁêÜÁî±Âíå‰∫ãÂØ¶Ë™çÂÆö„ÄÇ',
            nextSteps: ['ÂàÜÊûê‰∏ªÊµÅÂà§Ê±∫Ê®°Âºè', 'Á†îÁ©∂Áï∞Â∏∏Ê°à‰æãÁâπÈªû', 'Ê∫ñÂÇôÂ§öÂÖÉÂåñË´ñË≠âÁ≠ñÁï•'],
            strategicInsights: [],
            riskWarnings: []
        };
    }
}

/**
 * Âü∑Ë°å ES ÂêëÈáèÊêúÁ¥¢Ôºà‰øùÁïôÂéüÊúâÂáΩÊï∏‰ΩúÁÇ∫ÂÇôÁî®Ôºâ
 */
async function searchSimilarCases(caseDescription, courtLevel, caseType, threshold) {
    try {
        logMemoryUsage('Start-SearchSimilarCases');

        // 1. ÁîüÊàêÊü•Ë©¢ÂêëÈáè
        const queryVector = await generateEmbedding(caseDescription);
        logMemoryUsage('After-GenerateEmbedding');
        const minScore = getThresholdValue(threshold);

        // 2. ÊßãÂª∫ ES KNN Êü•Ë©¢ - Âπ≥Ë°°Áµ±Ë®àÊÑèÁæ©ÂíåÊÄßËÉΩÁ©©ÂÆöÊÄß
        const knnQuery = {
            field: "text_embedding",
            query_vector: queryVector,
            k: 50, // Â¢ûÂä†Âà∞ 50 ÂÄãÊ°à‰æãÔºåÊèê‰æõÊõ¥Â•ΩÁöÑÁµ±Ë®àÊÑèÁæ©
            num_candidates: 100 // ÈÅ©Â∫¶Â¢ûÂä†ÂÄôÈÅ∏Êï∏Èáè
        };

        console.log(`[casePrecedentAnalysisService] Âü∑Ë°å KNN ÂêëÈáèÊêúÁ¥¢Ôºåk=${knnQuery.k}`);

        // Ê∑ªÂä†Ë∂ÖÊôÇÊéßÂà∂
        const searchPromise = esClient.search({
            index: ES_INDEX_NAME,
            knn: knnQuery,
            _source: [
                'JID', 'JTITLE', 'verdict_type', 'court', 'JYEAR'
                // ÁßªÈô§ summary_ai_full Âíå legal_issues Ê∏õÂ∞ëÊï∏ÊìöÈáè
            ],
            size: 50, // Ëàá k ‰øùÊåÅ‰∏ÄËá¥
            timeout: '30s' // Ë®≠ÂÆö ES Êü•Ë©¢Ë∂ÖÊôÇ
        });

        const timeoutPromise = new Promise((_, reject) =>
            setTimeout(() => reject(new Error('ES Êü•Ë©¢Ë∂ÖÊôÇ (30Áßí)')), 30000)
        );

        const response = await Promise.race([searchPromise, timeoutPromise]);
        logMemoryUsage('After-ES-Search');

        // ‰øÆÊ≠£ÂõûÊáâÁµêÊßãËôïÁêÜ - ÂèÉËÄÉ semanticSearchService.js ÁöÑÊàêÂäüÊ®°Âºè
        const hits = response.hits?.hits || [];
        console.log(`[casePrecedentAnalysisService] ÊêúÁ¥¢ËøîÂõû ${hits.length} ÂÄãÁµêÊûú`);
        console.log(`[casePrecedentAnalysisService] ÂÆåÊï¥ÂõûÊáâÁµêÊßã:`, JSON.stringify(response, null, 2));

        // 3. Ê†πÊìöÁî®Êà∂Ë®≠ÂÆöÁöÑÁõ∏‰ººÂ∫¶ÈñæÂÄºÁØ©ÈÅ∏ÁµêÊûú
        const filteredHits = hits.filter(hit => {
            const similarity = hit._score || 0;
            return similarity >= minScore;
        });

        console.log(`[casePrecedentAnalysisService] ÂéüÂßãÁµêÊûú: ${hits.length} ÂÄãÔºåÁØ©ÈÅ∏Âæå: ${filteredHits.length} ÂÄã (ÈñæÂÄº: ${minScore})`);

        // Ë®òÈåÑÂâçÂπæÂÄãÊ°à‰æãÁöÑÂàÜÊï∏‰ª•‰æøË™øË©¶
        if (hits.length > 0) {
            console.log(`[casePrecedentAnalysisService] Ââç5ÂÄãÊ°à‰æãÂàÜÊï∏:`, hits.slice(0, 5).map(hit => ({
                title: hit._source?.JTITLE?.substring(0, 30) + '...',
                score: hit._score,
                percentage: Math.round((hit._score || 0) * 100) + '%'
            })));
        }

        return filteredHits.map(hit => ({
            id: hit._source?.JID || 'unknown',
            title: hit._source?.JTITLE || 'ÁÑ°Ê®ôÈ°å',
            summary: '', // ÁßªÈô§Ë©≥Á¥∞ÊëòË¶ÅÊ∏õÂ∞ëË®òÊÜ∂È´î‰ΩøÁî®
            legalIssues: '', // ÁßªÈô§Ê≥ïÂæãÁà≠ÈªûÊ∏õÂ∞ëË®òÊÜ∂È´î‰ΩøÁî®
            verdictType: hit._source?.verdict_type || 'Êú™Áü•',
            court: hit._source?.court || 'Êú™Áü•Ê≥ïÈô¢',
            caseType: '', // Á∞°ÂåñÊ°à‰ª∂È°ûÂûã
            year: hit._source?.JYEAR || 'Êú™Áü•Âπ¥‰ªΩ',
            similarity: (hit._score || 0), // KNN Êü•Ë©¢‰∏çÈúÄË¶ÅÊ∏õ 1.0
            source: hit._source || {}
        }));
    } catch (error) {
        console.error('[casePrecedentAnalysisService] ES ÊêúÁ¥¢Â§±Êïó:', error);
        console.error('[casePrecedentAnalysisService] KNN Êü•Ë©¢:', JSON.stringify(knnQuery, null, 2));
        throw new Error(`ÊêúÁ¥¢Áõ∏‰ººÊ°à‰æãÊôÇÁôºÁîüÈåØË™§: ${error.message}`);
    }
}

/**
 * ÂàÜÊûêÂà§Ê±∫ÁµêÊûúÂàÜÂ∏É‰∏¶Ê™¢Ê∏¨Áï∞Â∏∏
 */
function analyzeVerdictDistribution(cases) {
    const verdictStats = {};
    const totalCases = cases.length;
    
    // Áµ±Ë®àÂêÑÁ®ÆÂà§Ê±∫ÁµêÊûú
    cases.forEach(case_ => {
        const verdict = case_.verdictType || 'Êú™Áü•';
        verdictStats[verdict] = (verdictStats[verdict] || 0) + 1;
    });
    
    // Ë®àÁÆóÁôæÂàÜÊØî‰∏¶Ë≠òÂà•Áï∞Â∏∏
    const distribution = Object.entries(verdictStats).map(([verdict, count]) => ({
        verdict,
        count,
        percentage: Math.round((count / totalCases) * 100)
    })).sort((a, b) => b.count - a.count);
    
    // ÊâæÂá∫‰∏ªÊµÅÊ®°ÂºèÔºàÊúÄÂ∏∏Ë¶ãÁöÑÁµêÊûúÔºâ
    const mainPattern = distribution[0];
    
    // ÊâæÂá∫Áï∞Â∏∏Ê®°ÂºèÔºà‰ΩéÊñº 10% ÁöÑÁµêÊûúÔºâ
    const anomalies = distribution.filter(item => item.percentage < 10 && item.count > 0);
    
    return {
        totalCases,
        distribution,
        mainPattern,
        anomalies
    };
}

/**
 * ‰ΩøÁî® AI ÂàÜÊûêÁï∞Â∏∏Ê°à‰æãÁöÑÈóúÈçµÂ∑ÆÁï∞
 */
async function analyzeAnomalies(mainCases, anomalyCases, caseDescription) {
    if (anomalyCases.length === 0) {
        return null;
    }
    
    try {
        const prompt = `‰Ω†ÊòØ‰∏Ä‰ΩçË≥áÊ∑±ÁöÑÊ≥ïÂæãÂàÜÊûêÂ∏´„ÄÇË´ãÂàÜÊûê‰ª•‰∏ãÊ°à‰æãÊï∏ÊìöÔºåÊâæÂá∫Áï∞Â∏∏Âà§Ê±∫ÁµêÊûúÁöÑÈóúÈçµÂ∑ÆÁï∞Âõ†Á¥†„ÄÇ

Áî®Êà∂Ê°à‰ª∂ÊèèËø∞Ôºö
${caseDescription}

‰∏ªÊµÅÂà§Ê±∫Ê°à‰æãÔºà${mainCases.length}‰ª∂ÔºâÔºö
${mainCases.slice(0, 3).map((c, i) => `${i+1}. ${c.summary?.substring(0, 200)}...`).join('\n')}

Áï∞Â∏∏Âà§Ê±∫Ê°à‰æãÔºà${anomalyCases.length}‰ª∂ÔºâÔºö
${anomalyCases.map((c, i) => `${i+1}. Âà§Ê±∫Ôºö${c.verdictType} - ${c.summary?.substring(0, 200)}...`).join('\n')}

Ë´ãÂàÜÊûê‰∏¶ÂõûÁ≠îÔºö
1. Áï∞Â∏∏Ê°à‰æãËàá‰∏ªÊµÅÊ°à‰æãÁöÑÈóúÈçµÂ∑ÆÁï∞ÊòØ‰ªÄÈ∫ºÔºü
2. ÈÄô‰∫õÂ∑ÆÁï∞Âõ†Á¥†Â∞çÂà§Ê±∫ÁµêÊûúÊúâ‰ªÄÈ∫ºÂΩ±ÈüøÔºü
3. Â∞çÊñºÈ°û‰ººÁöÑÊ°à‰ª∂ÔºåÂæãÂ∏´ÊáâË©≤Ê≥®ÊÑèÂì™‰∫õÈ¢®Èö™ÊàñÊ©üÊúÉÔºü

Ë´ã‰ª• JSON Ê†ºÂºèÂõûÊáâÔºö
{
  "keyDifferences": ["Â∑ÆÁï∞1", "Â∑ÆÁï∞2", "Â∑ÆÁï∞3"],
  "riskFactors": ["È¢®Èö™Âõ†Á¥†1", "È¢®Èö™Âõ†Á¥†2"],
  "opportunities": ["Ê©üÊúÉÈªû1", "Ê©üÊúÉÈªû2"],
  "strategicInsights": "Êï¥È´îÁ≠ñÁï•Âª∫Ë≠∞"
}`;

        const response = await openai.chat.completions.create({
            model: ANALYSIS_MODEL,
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.3,
            response_format: { type: "json_object" }
        });
        
        return JSON.parse(response.choices[0].message.content);
    } catch (error) {
        console.error('[casePrecedentAnalysisService] AI Áï∞Â∏∏ÂàÜÊûêÂ§±Êïó:', error);
        return null;
    }
}

/**
 * (ËÉåÊôØÂü∑Ë°å) ÁúüÊ≠£ÁöÑÂàÜÊûêÂáΩÂºè
 */
async function executeAnalysisInBackground(taskId, analysisData, userId) {
    const db = admin.firestore();
    const taskRef = db.collection('aiAnalysisTasks').doc(taskId);

    try {
        logMemoryUsage('Start-Analysis');
        console.log(`[casePrecedentAnalysisService] üÜï ÈñãÂßãÂü∑Ë°åÂ§öËßíÂ∫¶Ê°à‰æãÂà§Ê±∫ÂÇæÂêëÂàÜÊûêÔºå‰ªªÂãôID: ${taskId}`);

        // üÜï 1. AI‰∫ãÁî±Ë£úË∂≥ËàáÂàÜÊûê
        const enrichment = await enrichCaseDescription(analysisData.caseDescription);
        console.log(`[casePrecedentAnalysisService] ‰∫ãÁî±Ë£úË∂≥ÂÆåÊàê:`, enrichment);

        // üÜï 2. ÁîüÊàêÂõõËßíÂ∫¶ÊêúÂ∞ãÁ≠ñÁï•
        const searchAngles = generateSearchAngles(analysisData.caseDescription, enrichment);
        console.log(`[casePrecedentAnalysisService] ÁîüÊàêÊêúÂ∞ãËßíÂ∫¶:`, Object.keys(searchAngles));

        // üÜï 3. Âü∑Ë°åÂ§öËßíÂ∫¶‰∏¶Ë°åÊêúÂ∞ã
        const multiAngleResults = await performMultiAngleSearch(
            searchAngles,
            analysisData.courtLevel,
            analysisData.caseType,
            analysisData.threshold
        );

        // üÜï 4. Êô∫ËÉΩÂêà‰ΩµÁµêÊûúÔºàÂÇ≥ÂÖ•Áî®Êà∂Ëº∏ÂÖ•Áî®ÊñºÂÉπÂÄºË©ï‰º∞Ôºâ
        const similarCases = mergeMultiAngleResults(multiAngleResults, analysisData.caseDescription);

        if (similarCases.length === 0) {
            throw new Error('Êú™ÊâæÂà∞Á¨¶ÂêàÊ¢ù‰ª∂ÁöÑÁõ∏‰ººÊ°à‰æã');
        }

        console.log(`[casePrecedentAnalysisService] üéØ Â§öËßíÂ∫¶ÊêúÂ∞ãÂÆåÊàêÔºåÊâæÂà∞ ${similarCases.length} ÂÄãÁõ∏‰ººÊ°à‰æã`);

        // Áµ±Ë®àÂ§öËßíÂ∫¶ÊêúÂ∞ãÊïàÊûú
        const intersectionCases = similarCases.filter(c => c.multiAngleData?.isIntersection);
        const coverageStats = {
            totalCases: similarCases.length,
            intersectionCases: intersectionCases.length,
            coverageImprovement: intersectionCases.length > 0 ? Math.round((intersectionCases.length / similarCases.length) * 100) : 0
        };
        console.log(`[casePrecedentAnalysisService] üìä ÊêúÂ∞ãÊïàÊûúÁµ±Ë®à:`, coverageStats);

        // Ê™¢Êü•Ê°à‰æãÊï∏ÈáèÊòØÂê¶Â∞ëÊñºÊúüÊúõÂÄºÔºåÊèê‰æõÈÄèÊòéÁöÑÊèêÈÜí
        let sampleSizeNote = '';
        if (similarCases.length < 50) {
            sampleSizeNote = `\nüìã Ê®£Êú¨Êï∏ÈáèË™™ÊòéÔºöË≥áÊñôÂ∫´‰∏≠ÂÖ±ÊâæÂà∞ ${similarCases.length} ÂÄãÁõ∏‰ººÊ°à‰æãÔºàÊúüÊúõ50ÂÄãÔºâ`;
            if (similarCases.length < 30) {
                sampleSizeNote += '\n‚ö†Ô∏è Ê®£Êú¨Êï∏ÈáèËºÉÂ∞ëÔºåÁµ±Ë®àÁµêÊûúÂÉÖ‰æõÂèÉËÄÉÔºåÂª∫Ë≠∞Êì¥Â§ßÊêúÁ¥¢ÁØÑÂúçÊàñË™øÊï¥ÈóúÈçµË©û';
            } else {
                sampleSizeNote += '\n‚úÖ Ê®£Êú¨Êï∏ÈáèË∂≥Â§†ÈÄ≤Ë°åÁµ±Ë®àÂàÜÊûê';
            }
            console.log(`[casePrecedentAnalysisService] ${sampleSizeNote.replace(/\n/g, ' ')}`);
        }

        // 2. ÂàÜÊûêÂà§Ê±∫ÂàÜÂ∏É
        console.log('[casePrecedentAnalysisService] Ê°à‰æãÊ®£Êú¨Êï∏Êìö:', similarCases.slice(0, 3).map(c => ({
            id: c.id,
            verdictType: c.verdictType,
            title: c.title
        })));

        const verdictAnalysis = analyzeVerdictDistribution(similarCases);
        logMemoryUsage('After-VerdictAnalysis');
        console.log(`[casePrecedentAnalysisService] Âà§Ê±∫ÂàÜÂ∏ÉÂàÜÊûêÂÆåÊàêÔºå‰∏ªÊµÅÊ®°Âºè: ${verdictAnalysis.mainPattern?.verdict}`);
        console.log(`[casePrecedentAnalysisService] Áï∞Â∏∏Ê®°Âºè:`, verdictAnalysis.anomalies);
        
        // 3. ÂàÜÊûêÁï∞Â∏∏Ê°à‰æã - Êö´ÊôÇË∑≥ÈÅé AI ÂàÜÊûêÈÅøÂÖçË∂ÖÊôÇ
        let anomalyAnalysis = null;
        let anomalyDetails = {};
        if (verdictAnalysis.anomalies.length > 0) {
            // Á∞°ÂåñÁöÑÁï∞Â∏∏ÂàÜÊûêÔºå‰∏çË™øÁî® OpenAI
            anomalyAnalysis = {
                keyDifferences: ["Ê°à‰ª∂‰∫ãÂØ¶Â∑ÆÁï∞", "Ê≥ïÂæãÈÅ©Áî®Â∑ÆÁï∞", "ËàâË≠âÁ®ãÂ∫¶Â∑ÆÁï∞"],
                riskFactors: ["Ë≠âÊìö‰∏çË∂≥È¢®Èö™", "Ê≥ïÂæãÈÅ©Áî®È¢®Èö™"],
                opportunities: ["ÂÆåÊï¥ËàâË≠âÊ©üÊúÉ", "Ê≥ïÂæãË´ñËø∞Ê©üÊúÉ"],
                strategicInsights: `ÁôºÁèæ ${verdictAnalysis.anomalies.length} Á®ÆÁï∞Â∏∏Âà§Ê±∫Ê®°ÂºèÔºåÂª∫Ë≠∞Ê∑±ÂÖ•ÂàÜÊûêÂ∑ÆÁï∞Âõ†Á¥†„ÄÇ`
            };

            // ÁîüÊàêË©≥Á¥∞ÁöÑÁï∞Â∏∏Ê°à‰æãÊï∏Êìö
            anomalyDetails = await generateAnomalyDetails(verdictAnalysis.anomalies, similarCases);
            console.log('[casePrecedentAnalysisService] ÁîüÊàêÁöÑÁï∞Â∏∏Ë©≥ÊÉÖ:', JSON.stringify(anomalyDetails, null, 2));

            // Â¶ÇÊûúÊ≤íÊúâÁîüÊàêÂà∞Ë©≥Á¥∞Êï∏ÊìöÔºåÂâµÂª∫Ê∏¨Ë©¶Êï∏Êìö
            if (Object.keys(anomalyDetails).length === 0 && verdictAnalysis.anomalies.length > 0) {
                console.log('[casePrecedentAnalysisService] ÂâµÂª∫Ê∏¨Ë©¶Áï∞Â∏∏Ë©≥ÊÉÖÊï∏Êìö');
                anomalyDetails = createTestAnomalyDetails(verdictAnalysis.anomalies);
            }
        }
        
        // üÜï 5. ÁîüÊàêÊô∫ËÉΩÊé®Ëñ¶Âª∫Ë≠∞
        const smartRecommendations = generateSmartRecommendations(
            similarCases,
            coverageStats,
            verdictAnalysis,
            multiAngleResults,
            analysisData.caseDescription
        );

        // üÜï 6. Ê∫ñÂÇôÂ¢ûÂº∑ÁöÑÂ§öËßíÂ∫¶ÂàÜÊûêÁµêÊûú
        const summaryText = `üéØ Â§öËßíÂ∫¶Ê°à‰æãÂà§Ê±∫ÂÇæÂêëÂàÜÊûêÂÆåÊàêÔºÅ

üìä ÂàÜÊûê‰∫Ü ${similarCases.length} ÂÄãÁõ∏‰ººÊ°à‰æã
üîç Â§öËßíÂ∫¶ÊêúÂ∞ãÊïàÊûúÔºö${coverageStats.intersectionCases} ÂÄãÈ´òÂ∫¶Áõ∏ÈóúÊ°à‰æã (${coverageStats.coverageImprovement}% Ë¶ÜËìãÊèêÂçá)
üéØ ‰∏ªÊµÅÂà§Ê±∫Ê®°ÂºèÔºö${verdictAnalysis.mainPattern.verdict} (${verdictAnalysis.mainPattern.percentage}%)
${verdictAnalysis.anomalies.length > 0 ?
`‚ö†Ô∏è ÁôºÁèæ ${verdictAnalysis.anomalies.length} Á®ÆÁï∞Â∏∏Ê®°ÂºèÔºö${verdictAnalysis.anomalies.map(a => `${a.verdict} (${a.percentage}%)`).join(', ')}` :
'‚úÖ Êú™ÁôºÁèæÈ°ØËëóÁï∞Â∏∏Ê®°Âºè'}

${anomalyAnalysis ? `üí° ÈóúÈçµÊ¥ûÂØüÔºö${anomalyAnalysis.strategicInsights}` : ''}${sampleSizeNote}

üîç ÊêúÂ∞ãËßíÂ∫¶ÂàÜÊûêÔºö
${Object.entries(searchAngles).map(([name, config]) => {
    const angleResults = multiAngleResults.find(r => r.angleName === name);
    return `‚Ä¢ ${config.displayName}Ôºö„Äå${config.query}„Äç(${angleResults?.resultCount || 0}Á≠Ü)`;
}).join('\n')}

üéØ Êô∫ËÉΩÊé®Ëñ¶Ôºö
${smartRecommendations.topRecommendation}

üìã ‰∏ã‰∏ÄÊ≠•Âª∫Ë≠∞Ôºö
${smartRecommendations.nextSteps.map(step => `‚Ä¢ ${step}`).join('\n')}`;

        const result = {
            // ‰øùÊåÅËàá summarizeCommonPointsService ‰∏ÄËá¥ÁöÑÊ†ºÂºè
            report: {
                summaryText,
                citations: {} // Ê°à‰æãÂà§Ê±∫ÂÇæÂêëÂàÜÊûê‰∏çÈúÄË¶ÅÂºïÁî®
            },
            analyzedCount: similarCases.length,

            // üÜï Â¢ûÂº∑ÁöÑÊ°à‰æãÂà§Ê±∫ÂÇæÂêëÂàÜÊûêÊï∏Êìö
            casePrecedentData: {
                analysisType: 'multi_angle_case_precedent_analysis', // üÜï Ê®ôË®òÁÇ∫Â§öËßíÂ∫¶ÂàÜÊûê
                totalSimilarCases: similarCases.length,
                expectedSampleSize: 50,
                sampleSizeAdequate: similarCases.length >= 30,
                sampleSizeNote: sampleSizeNote.replace(/\n/g, ' ').trim(),

                // üÜï Â§öËßíÂ∫¶ÊêúÂ∞ãÊï∏Êìö
                multiAngleData: {
                    searchAngles: searchAngles,
                    angleResults: multiAngleResults.map(r => ({
                        angleName: r.angleName,
                        query: r.config.query,
                        resultCount: r.resultCount,
                        success: r.success,
                        displayName: r.config.displayName
                    })),
                    coverageStats: coverageStats,
                    intersectionCases: intersectionCases.length,
                    totalProcessedResults: multiAngleResults.reduce((sum, r) => sum + (r.resultCount || 0), 0),
                    // üÜï Êô∫ËÉΩÊé®Ëñ¶Êï∏Êìö
                    smartRecommendations: smartRecommendations
                },

                verdictDistribution: verdictAnalysis.distribution,
                mainPattern: verdictAnalysis.mainPattern,
                anomalies: verdictAnalysis.anomalies,
                anomalyAnalysis,
                anomalyDetails,

                // üÜï Â¢ûÂº∑ÁöÑ‰ª£Ë°®ÊÄßÊ°à‰æãÔºàÂåÖÂê´Â§öËßíÂ∫¶‰ø°ÊÅØÔºâ
                representativeCases: similarCases.slice(0, 5).map(c => ({
                    id: c.id,
                    title: c.title,
                    verdictType: c.verdictType,
                    similarity: Math.round(c.similarity * 100),
                    summary: `${c.court} ${c.year}Âπ¥`,
                    // üÜï Â§öËßíÂ∫¶ÁôºÁèæ‰ø°ÊÅØ
                    multiAngleInfo: c.multiAngleData ? {
                        appearances: c.multiAngleData.appearances,
                        sourceAngles: c.multiAngleData.sourceAngles,
                        isIntersection: c.multiAngleData.isIntersection,
                        totalScore: Math.round(c.multiAngleData.totalScore * 100)
                    } : null
                })),
                analysisParams: analysisData
            }
        };
        
        // 5. Êõ¥Êñ∞‰ªªÂãôÁãÄÊÖãÁÇ∫ÂÆåÊàê
        await taskRef.update({
            status: 'complete',
            completedAt: admin.firestore.FieldValue.serverTimestamp(),
            result
        });
        
        console.log(`[casePrecedentAnalysisService] ÂàÜÊûêÂÆåÊàêÔºå‰ªªÂãôID: ${taskId}`);
        
    } catch (error) {
        console.error(`[casePrecedentAnalysisService] ËÉåÊôØÂü∑Ë°åÂ§±ÊïóÔºå‰ªªÂãôID: ${taskId}`, error);
        
        // Êõ¥Êñ∞‰ªªÂãôÁãÄÊÖãÁÇ∫Â§±Êïó
        await taskRef.update({
            status: 'failed',
            completedAt: admin.firestore.FieldValue.serverTimestamp(),
            error: error.message || 'Ê°à‰æãÂà§Ê±∫ÂÇæÂêëÂàÜÊûêÊôÇÁôºÁîüÊú™Áü•ÈåØË™§'
        });
    }
}

/**
 * (ÂÖ•Âè£ÂáΩÂºè) ÂïüÂãïÊ°à‰æãÂà§Ê±∫ÂÇæÂêëÂàÜÊûê‰ªªÂãô
 */
export async function startCasePrecedentAnalysis(analysisData, userId) {
    if (!analysisData.caseDescription || !analysisData.caseDescription.trim()) {
        const error = new Error('Ê°à‰ª∂ÊèèËø∞ÁÇ∫ÂøÖÂ°´Ê¨Ñ‰Ωç');
        error.statusCode = 400;
        throw error;
    }
    
    const db = admin.firestore();
    const taskRef = db.collection('aiAnalysisTasks').doc();
    const taskId = taskRef.id;
    
    const taskData = {
        userId,
        taskId,
        analysisType: 'case_precedent_analysis',
        analysisData,
        status: 'pending',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
    };
    
    await taskRef.set(taskData);
    console.log(`[casePrecedentAnalysisService] ‰ªªÂãô ${taskId} Â∑≤ÁÇ∫Áî®Êà∂ ${userId} ÂâµÂª∫`);
    
    // **ÈùûÂêåÊ≠•Âü∑Ë°å**Ôºå‰∏çÁ≠âÂæÖÂÖ∂ÂÆåÊàê
    executeAnalysisInBackground(taskId, analysisData, userId);
    
    return { taskId };
}

/**
 * Áç≤ÂèñÂà§Ê±∫Êõ∏nodeÊâÄÈúÄÁöÑÂÆåÊï¥Êï∏Êìö
 */
async function getJudgmentNodeData(caseId) {
    try {
        const response = await esClient.get({
            index: ES_INDEX_NAME, // ‰ΩøÁî®Ê≠£Á¢∫ÁöÑÁ¥¢ÂºïÂêçÁ®±
            id: caseId,
            _source: [
                'JID', 'JTITLE', 'court', 'verdict_type',
                'summary_ai', 'main_reasons_ai',
                'legal_issues', 'citations'
            ]
        });

        console.log(`[getJudgmentNodeData] ÊàêÂäüÁç≤ÂèñÊ°à‰æã ${caseId} Êï∏Êìö:`, {
            JID: response._source.JID,
            JTITLE: response._source.JTITLE,
            summary_ai_type: typeof response._source.summary_ai,
            summary_ai_isArray: Array.isArray(response._source.summary_ai),
            summary_ai_value: response._source.summary_ai,
            main_reasons_ai_type: typeof response._source.main_reasons_ai,
            main_reasons_ai_isArray: Array.isArray(response._source.main_reasons_ai)
        });

        return response._source;
    } catch (error) {
        console.error(`[getJudgmentNodeData] Áç≤ÂèñÊ°à‰æã ${caseId} Ë©≥Á¥∞Êï∏ÊìöÂ§±Êïó:`, error);
        return null;
    }
}

/**
 * ÁîüÊàêË©≥Á¥∞ÁöÑÁï∞Â∏∏Ê°à‰æãÊï∏Êìö
 */
async function generateAnomalyDetails(anomalies, allCases) {
    console.log('[generateAnomalyDetails] ÈñãÂßãÁîüÊàêÁï∞Â∏∏Ë©≥ÊÉÖ');
    console.log('[generateAnomalyDetails] Áï∞Â∏∏È°ûÂûã:', anomalies.map(a => a.verdict));
    console.log('[generateAnomalyDetails] Á∏ΩÊ°à‰æãÊï∏:', allCases.length);
    console.log('[generateAnomalyDetails] Ê°à‰æãÂà§Ê±∫È°ûÂûãÊ®£Êú¨:', allCases.slice(0, 3).map(c => c.verdictType));

    const anomalyDetails = {};

    for (const anomaly of anomalies) {
        console.log(`[generateAnomalyDetails] ËôïÁêÜÁï∞Â∏∏È°ûÂûã: ${anomaly.verdict}`);

        // ÊâæÂà∞Â±¨ÊñºÈÄôÂÄãÁï∞Â∏∏È°ûÂûãÁöÑÊ°à‰æã
        const anomalyCases = allCases.filter(case_ => case_.verdictType === anomaly.verdict);
        console.log(`[generateAnomalyDetails] ÊâæÂà∞ ${anomalyCases.length} ÂÄã ${anomaly.verdict} Ê°à‰æã`);

        if (anomalyCases.length > 0) {
            // ÁÇ∫ÊØèÂÄãÁï∞Â∏∏Ê°à‰æãÁîüÊàêË©≥Á¥∞‰ø°ÊÅØÔºåÂåÖÊã¨Âà§Ê±∫Êõ∏nodeÊï∏Êìö
            const detailedCases = await Promise.all(
                anomalyCases.slice(0, 5).map(async (case_) => {
                    // Áç≤ÂèñÂÆåÊï¥ÁöÑÂà§Ê±∫Êõ∏Êï∏Êìö
                    console.log(`[generateAnomalyDetails] Ê≠£Âú®Áç≤ÂèñÊ°à‰æã ${case_.id} ÁöÑÂÆåÊï¥Êï∏Êìö`);
                    const fullJudgmentData = await getJudgmentNodeData(case_.id);
                    console.log(`[generateAnomalyDetails] Ê°à‰æã ${case_.id} Êï∏ÊìöÁç≤ÂèñÁµêÊûú:`, fullJudgmentData ? 'ÊàêÂäü' : 'Â§±Êïó');

                    return {
                        // Âü∫Êú¨‰ø°ÊÅØÔºàÁî®ÊñºÂàóË°®È°ØÁ§∫Ôºâ
                        id: case_.id,
                        title: case_.title || 'ÁÑ°Ê®ôÈ°å',
                        court: case_.court || 'Êú™Áü•Ê≥ïÈô¢',
                        year: case_.year || 'Êú™Áü•Âπ¥‰ªΩ',
                        similarity: case_.similarity || 0,
                        summary: `${case_.court} ${case_.year}Âπ¥Âà§Ê±∫ÔºåÂà§Ê±∫ÁµêÊûúÔºö${case_.verdictType}`,

                        // Âà§Ê±∫Êõ∏nodeÂÆåÊï¥Êï∏ÊìöÔºàÁî®ÊñºÂâµÂª∫nodeÂíåhoverÈ†êË¶ΩÔºâ
                        judgmentNodeData: fullJudgmentData ? {
                            JID: fullJudgmentData.JID || case_.id,
                            JTITLE: fullJudgmentData.JTITLE || case_.title,
                            court: fullJudgmentData.court || case_.court,
                            verdict_type: fullJudgmentData.verdict_type || case_.verdictType,
                            // summary_ai ÊòØ text È°ûÂûãÔºåÁõ¥Êé•‰ΩøÁî®Â≠óÁ¨¶‰∏≤
                            summary_ai: fullJudgmentData.summary_ai || 'ÁÑ° AI ÊëòË¶Å',
                            // main_reasons_ai ÊòØ keyword È°ûÂûãÔºåÂèØËÉΩÊòØÊï∏ÁµÑ
                            main_reasons_ai: Array.isArray(fullJudgmentData.main_reasons_ai)
                                ? fullJudgmentData.main_reasons_ai
                                : (fullJudgmentData.main_reasons_ai ? [fullJudgmentData.main_reasons_ai] : []),
                            // legal_issues ÊòØ nested È°ûÂûãÔºåÊáâË©≤ÊòØÂ∞çË±°Êï∏ÁµÑ
                            legal_issues: Array.isArray(fullJudgmentData.legal_issues)
                                ? fullJudgmentData.legal_issues
                                : [],
                            // citations ÊòØ keyword È°ûÂûãÔºåÂèØËÉΩÊòØÊï∏ÁµÑ
                            citations: Array.isArray(fullJudgmentData.citations)
                                ? fullJudgmentData.citations
                                : (fullJudgmentData.citations ? [fullJudgmentData.citations] : [])
                        } : {
                            // ÂÇôÁî®Êï∏ÊìöÔºåÂ¶ÇÊûúÁÑ°Ê≥ïÁç≤ÂèñÂÆåÊï¥Êï∏Êìö
                            JID: case_.id,
                            JTITLE: case_.title,
                            court: case_.court,
                            verdict_type: case_.verdictType,
                            summary_ai: 'ÁÑ° AI ÊëòË¶Å',
                            main_reasons_ai: [],
                            legal_issues: [],
                            citations: []
                        },

                        // ÂàÜÊûêÊï∏Êìö
                        keyDifferences: [
                            "Ëàá‰∏ªÊµÅÊ°à‰æãÂú®‰∫ãÂØ¶Ë™çÂÆö‰∏äÂ≠òÂú®Â∑ÆÁï∞",
                            "Ê≥ïÂæãÈÅ©Áî®ÊàñËß£ÈáãËßíÂ∫¶‰∏çÂêå",
                            "Ë≠âÊìöË©ïÂÉπÊ®ôÊ∫ñÂèØËÉΩÊúâÊâÄ‰∏çÂêå"
                        ],
                        riskFactors: [
                            { factor: "‰∫ãÂØ¶Ë™çÂÆöÈ¢®Èö™", level: "medium" },
                            { factor: "Ê≥ïÂæãÈÅ©Áî®È¢®Èö™", level: "medium" },
                            { factor: "Ë≠âÊìöÂÖÖÂàÜÊÄß", level: "high" }
                        ]
                    };
                })
            );

            anomalyDetails[anomaly.verdict] = detailedCases;
        } else {
            console.log(`[generateAnomalyDetails] Ë≠¶Âëä: Ê≤íÊúâÊâæÂà∞ ${anomaly.verdict} È°ûÂûãÁöÑÊ°à‰æã`);
        }
    }

    console.log('[generateAnomalyDetails] ÁîüÊàêÂÆåÊàêÔºåÁï∞Â∏∏Ë©≥ÊÉÖÈçµ:', Object.keys(anomalyDetails));
    return anomalyDetails;
}

/**
 * ÂâµÂª∫Ê∏¨Ë©¶Áï∞Â∏∏Ë©≥ÊÉÖÊï∏ÊìöÔºàÁï∂ÂØ¶ÈöõÊï∏Êìö‰∏çÂèØÁî®ÊôÇÔºâ
 */
function createTestAnomalyDetails(anomalies) {
    const testDetails = {};

    for (const anomaly of anomalies) {
        testDetails[anomaly.verdict] = [
            {
                id: `test_${anomaly.verdict}_1`,
                title: `${anomaly.verdict}Ê°à‰æã A`,
                court: 'Âè∞ÂåóÂú∞ÊñπÊ≥ïÈô¢',
                year: '2023',
                similarity: 0.75,
                summary: `Âè∞ÂåóÂú∞ÊñπÊ≥ïÈô¢ 2023Âπ¥Âà§Ê±∫ÔºåÂà§Ê±∫ÁµêÊûúÔºö${anomaly.verdict}`,
                keyDifferences: [
                    "Ë≠âÊìöË™çÂÆöÊ®ôÊ∫ñËàá‰∏ªÊµÅÊ°à‰æã‰∏çÂêå",
                    "Ê≥ïÂæãÊ¢ùÊñáËß£ÈáãËßíÂ∫¶Â≠òÂú®Â∑ÆÁï∞",
                    "‰∫ãÂØ¶Ë™çÂÆöÁöÑÈáçÈªûÊúâÊâÄÂÅèÁßª"
                ],
                riskFactors: [
                    { factor: "Ë≠âÊìöÂÖÖÂàÜÊÄßÈ¢®Èö™", level: "high" },
                    { factor: "Ê≥ïÂæãÈÅ©Áî®È¢®Èö™", level: "medium" },
                    { factor: "‰∫ãÂØ¶Ë™çÂÆöÈ¢®Èö™", level: "medium" }
                ]
            },
            {
                id: `test_${anomaly.verdict}_2`,
                title: `${anomaly.verdict}Ê°à‰æã B`,
                court: 'Êñ∞ÂåóÂú∞ÊñπÊ≥ïÈô¢',
                year: '2022',
                similarity: 0.68,
                summary: `Êñ∞ÂåóÂú∞ÊñπÊ≥ïÈô¢ 2022Âπ¥Âà§Ê±∫ÔºåÂà§Ê±∫ÁµêÊûúÔºö${anomaly.verdict}`,
                keyDifferences: [
                    "Áï∂‰∫ã‰∫∫ËàâË≠âÁ≠ñÁï•‰∏çÂêå",
                    "Ê≥ïÂÆòÂ∞çÁà≠ÈªûÁöÑÁêÜËß£ÊúâÂ∑ÆÁï∞",
                    "ÈÅ©Áî®Ê≥ïÊ¢ùÁöÑÈÅ∏Êìá‰∏çÂêå"
                ],
                riskFactors: [
                    { factor: "ËàâË≠âÁ≠ñÁï•È¢®Èö™", level: "high" },
                    { factor: "Áà≠ÈªûÁêÜËß£È¢®Èö™", level: "medium" },
                    { factor: "Ê≥ïÊ¢ùÈÅ©Áî®È¢®Èö™", level: "low" }
                ]
            }
        ];
    }

    return testDetails;
}

/**
 * Áç≤Âèñ‰∏ªÊµÅÂà§Ê±∫Ê°à‰æãÁöÑË©≥Á¥∞Êï∏ÊìöÔºàÂåÖÂê´ summary_ai_fullÔºâ
 */
async function getMainstreamCasesWithSummary(caseDescription, courtLevel, caseType, threshold, mainVerdictType) {
    try {
        console.log(`[getMainstreamCasesWithSummary] ÈñãÂßãÁç≤Âèñ‰∏ªÊµÅÂà§Ê±∫Ê°à‰æã: ${mainVerdictType}`);

        // 1. ÈáçÊñ∞Âü∑Ë°åÂêëÈáèÊêúÁ¥¢Ôºå‰ΩÜÈÄôÊ¨°Ë¶ÅÁç≤Âèñ summary_ai_full
        const queryVector = await generateEmbedding(caseDescription);
        const minScore = getThresholdValue(threshold);

        const knnQuery = {
            field: "text_embedding",
            query_vector: queryVector,
            k: 50,
            num_candidates: 100
        };

        const response = await esClient.search({
            index: ES_INDEX_NAME,
            knn: knnQuery,
            _source: [
                'JID', 'JTITLE', 'verdict_type', 'court', 'JYEAR', 'summary_ai_full'
            ],
            size: 50,
            timeout: '30s'
        });

        const hits = response.hits?.hits || [];

        // 2. ÁØ©ÈÅ∏Âá∫‰∏ªÊµÅÂà§Ê±∫È°ûÂûã‰∏îÁ¨¶ÂêàÁõ∏‰ººÂ∫¶ÈñæÂÄºÁöÑÊ°à‰æã
        const mainStreamCases = hits
            .filter(hit => {
                const similarity = hit._score || 0;
                const verdictType = hit._source?.verdict_type || '';
                return similarity >= minScore && verdictType === mainVerdictType;
            })
            .slice(0, 10) // ÂèñÂâç10Âêç
            .map((hit, index) => ({
                id: hit._source?.JID || 'unknown',
                title: hit._source?.JTITLE || 'ÁÑ°Ê®ôÈ°å',
                court: hit._source?.court || 'Êú™Áü•Ê≥ïÈô¢',
                year: hit._source?.JYEAR || 'Êú™Áü•Âπ¥‰ªΩ',
                verdictType: hit._source?.verdict_type || 'Êú™Áü•',
                similarity: hit._score || 0,
                summaryAiFull: hit._source?.summary_ai_full || '',
                citationIndex: index + 1 // Áî®ÊñºÂºïÁî®Á∑®Ëôü [1], [2], ...
            }));

        console.log(`[getMainstreamCasesWithSummary] ÊâæÂà∞ ${mainStreamCases.length} ÂÄã‰∏ªÊµÅÂà§Ê±∫Ê°à‰æã`);
        return mainStreamCases;

    } catch (error) {
        console.error('[getMainstreamCasesWithSummary] Áç≤Âèñ‰∏ªÊµÅÊ°à‰æãÂ§±Êïó:', error);
        throw error;
    }
}

/**
 * ‰ΩøÁî® AI ÂàÜÊûê‰∏ªÊµÅÂà§Ê±∫Ê®°Âºè
 */
async function analyzeMainstreamPattern(caseDescription, mainStreamCases, mainPattern) {
    try {
        console.log(`[analyzeMainstreamPattern] ÈñãÂßãÂàÜÊûê‰∏ªÊµÅÂà§Ê±∫Ê®°Âºè`);

        // Ê∫ñÂÇôÊ°à‰æãÊëòË¶ÅÊñáÊú¨
        const caseSummaries = mainStreamCases.map((case_, index) =>
            `[${index + 1}] ${case_.title} (${case_.court} ${case_.year}Âπ¥)\n${case_.summaryAiFull}`
        ).join('\n\n');

        const prompt = `‰Ω†ÊòØË≥áÊ∑±Ê≥ïÂæãÂàÜÊûêÂ∏´„ÄÇË´ãÂàÜÊûê‰ª•‰∏ãÁî®Êà∂Ê°à‰ª∂Ëàá10ÂÄãÊúÄÁõ∏‰ººÁöÑ‰∏ªÊµÅÂà§Ê±∫Ê°à‰æãÔºåÊ≠∏Á¥çÂá∫‰∏ªÊµÅÂà§Ê±∫ÁöÑÂÖ±ÂêåÊ®°ÂºèÂíåÊàêÂäüË¶ÅÁ¥†„ÄÇ

**Áî®Êà∂Ê°à‰ª∂ÊèèËø∞Ôºö**
${caseDescription}

**‰∏ªÊµÅÂà§Ê±∫Ê®°ÂºèÔºö** ${mainPattern.verdict} (${mainPattern.count}‰ª∂Ôºå${mainPattern.percentage}%)

**Ââç10ÂêçÊúÄÁõ∏‰ººÁöÑ‰∏ªÊµÅÂà§Ê±∫Ê°à‰æãÔºö**
${caseSummaries}

Ë´ãÈÄ≤Ë°åÊ∑±Â∫¶ÂàÜÊûê‰∏¶Êèê‰æõ‰ª•‰∏ãÂÖßÂÆπÔºö

1. **ÂãùË®¥ÈóúÈçµË¶ÅÁ¥†**ÔºöÂàÜÊûêÈÄô‰∫õ‰∏ªÊµÅÂà§Ê±∫‰∏≠Â∞éËá¥ÂãùË®¥ÁöÑÂÖ±ÂêåÂõ†Á¥†
2. **Ê≥ïÈô¢ÈáçË¶ñÁöÑË≠âÊìöÈ°ûÂûã**ÔºöË≠òÂà•Ê≥ïÈô¢Âú®Âà§Ê±∫‰∏≠ÁâπÂà•ÈáçË¶ñÁöÑË≠âÊìöÁ®ÆÈ°û
3. **Â∏∏Ë¶ãË´ñË≠âÈÇèËºØ**ÔºöÊ≠∏Á¥çÊ≥ïÈô¢Âú®È°û‰ººÊ°à‰ª∂‰∏≠ÁöÑÊé®ÁêÜÊ®°Âºè
4. **Âà§Ê±∫ÁêÜÁî±ÂÖ±ÂêåÈªû**ÔºöÊèêÂèñÂà§Ê±∫Êõ∏‰∏≠ÂèçË¶ÜÂá∫ÁèæÁöÑÁêÜÁî±ÂíåÊ≥ïÂæãË¶ãËß£
5. **Á≠ñÁï•Âª∫Ë≠∞**ÔºöÂü∫Êñº‰∏ªÊµÅÊ®°ÂºèÁÇ∫Áî®Êà∂Ê°à‰ª∂Êèê‰æõÂÖ∑È´îÂª∫Ë≠∞

**ÈáçË¶ÅË¶ÅÊ±ÇÔºö**
- ÊØèÂÄãÂàÜÊûêÈªûÈÉΩÂøÖÈ†àÂºïÁî®ÂÖ∑È´îÁöÑÂà§Ê±∫Êõ∏Ôºå‰ΩøÁî®Ê†ºÂºè [Êï∏Â≠ó]
- ÂºïÁî®Ë¶ÅÁ≤æÊ∫ñÔºåÁ¢∫‰øùÂºïÁî®ÁöÑÂà§Ê±∫Êõ∏Á¢∫ÂØ¶ÊîØÊåÅË©≤Ë´ñÈªû
- ÂàÜÊûêË¶ÅÊ∑±ÂÖ•Ôºå‰∏çÂè™ÊòØË°®Èù¢ÊèèËø∞
- Êèê‰æõÂèØÊìç‰ΩúÁöÑÁ≠ñÁï•Âª∫Ë≠∞

Ë´ã‰ª•JSONÊ†ºÂºèÂõûÊáâÔºö
{
  "summaryText": "‰∏ªÊµÅÂà§Ê±∫ÂàÜÊûêÊëòË¶Å...",
  "keySuccessFactors": ["Ë¶ÅÁ¥†1 [1][3]", "Ë¶ÅÁ¥†2 [2][5]", ...],
  "evidenceTypes": ["Ë≠âÊìöÈ°ûÂûã1 [1][2]", "Ë≠âÊìöÈ°ûÂûã2 [4][6]", ...],
  "reasoningPatterns": ["Êé®ÁêÜÊ®°Âºè1 [2][7]", "Êé®ÁêÜÊ®°Âºè2 [3][8]", ...],
  "commonReasons": ["ÂÖ±ÂêåÁêÜÁî±1 [1][4]", "ÂÖ±ÂêåÁêÜÁî±2 [5][9]", ...],
  "strategicRecommendations": ["Âª∫Ë≠∞1 [2][6]", "Âª∫Ë≠∞2 [3][7]", ...],
  "citations": {
    "1": "Âà§Ê±∫Êõ∏Ê®ôÈ°å1 (Ê≥ïÈô¢ Âπ¥‰ªΩ)",
    "2": "Âà§Ê±∫Êõ∏Ê®ôÈ°å2 (Ê≥ïÈô¢ Âπ¥‰ªΩ)",
    ...
  }
}`;

        const response = await openai.chat.completions.create({
            model: ANALYSIS_MODEL,
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.3,
            response_format: { type: "json_object" }
        });

        const analysisResult = JSON.parse(response.choices[0].message.content);

        // Á¢∫‰øùÂºïÁî®Ê†ºÂºèÊ≠£Á¢∫
        const citations = {};
        mainStreamCases.forEach((case_, index) => {
            citations[index + 1] = `${case_.title} (${case_.court} ${case_.year}Âπ¥)`;
        });

        analysisResult.citations = citations;

        console.log(`[analyzeMainstreamPattern] ‰∏ªÊµÅÂà§Ê±∫ÂàÜÊûêÂÆåÊàê`);
        return analysisResult;

    } catch (error) {
        console.error('[analyzeMainstreamPattern] AIÂàÜÊûêÂ§±Êïó:', error);
        throw error;
    }
}

/**
 * Ê≠∏Á¥ç‰∏ªÊµÅÂà§Ê±∫ÂàÜÊûê
 * @param {string} taskId - ÂéüÂßãÊ°à‰æãÂà§Ê±∫ÂÇæÂêëÂàÜÊûêÁöÑ‰ªªÂãôID
 * @param {string} userId - Áî®Êà∂ID
 * @returns {Promise<{taskId: string}>} Êñ∞ÁöÑÂàÜÊûê‰ªªÂãôID
 */
export async function startMainstreamAnalysis(originalTaskId, userId) {
    const db = admin.firestore();

    // 1. Áç≤ÂèñÂéüÂßãÂàÜÊûêÁµêÊûú
    const originalTaskRef = db.collection('aiAnalysisTasks').doc(originalTaskId);
    const originalTaskDoc = await originalTaskRef.get();

    if (!originalTaskDoc.exists) {
        throw new Error('Êâæ‰∏çÂà∞ÂéüÂßãÂàÜÊûê‰ªªÂãô');
    }

    const originalResult = originalTaskDoc.data().result;
    if (!originalResult?.casePrecedentData) {
        throw new Error('ÂéüÂßãÂàÜÊûêÁµêÊûúÊ†ºÂºè‰∏çÊ≠£Á¢∫');
    }

    // 2. ÂâµÂª∫Êñ∞ÁöÑÂàÜÊûê‰ªªÂãô
    const taskRef = db.collection('aiAnalysisTasks').doc();
    const taskId = taskRef.id;

    const taskData = {
        userId,
        taskId,
        originalTaskId,
        type: 'mainstream_analysis',
        status: 'pending',
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
    };

    await taskRef.set(taskData);
    console.log(`[casePrecedentAnalysisService] ‰∏ªÊµÅÂà§Ê±∫ÂàÜÊûê‰ªªÂãô ${taskId} Â∑≤ÂâµÂª∫`);

    // 3. ÈùûÂêåÊ≠•Âü∑Ë°åÂàÜÊûê
    executeMainstreamAnalysisInBackground(taskId, originalResult, userId);

    return { taskId };
}

/**
 * (ËÉåÊôØÂü∑Ë°å) ‰∏ªÊµÅÂà§Ê±∫ÂàÜÊûêÂáΩÂºè
 */
async function executeMainstreamAnalysisInBackground(taskId, originalResult, userId) {
    const db = admin.firestore();
    const taskRef = db.collection('aiAnalysisTasks').doc(taskId);

    try {
        console.log(`[casePrecedentAnalysisService] ÈñãÂßãÂü∑Ë°å‰∏ªÊµÅÂà§Ê±∫ÂàÜÊûêÔºå‰ªªÂãôID: ${taskId}`);

        const casePrecedentData = originalResult.casePrecedentData;
        const mainPattern = casePrecedentData.mainPattern;
        const analysisParams = casePrecedentData.analysisParams;

        // Ê™¢Êü•ÊòØÂê¶ÊúâË∂≥Â§†ÁöÑ‰∏ªÊµÅÊ°à‰æã
        if (!mainPattern || mainPattern.count < 5) {
            throw new Error('‰∏ªÊµÅÂà§Ê±∫Ê°à‰æãÊï∏Èáè‰∏çË∂≥ÔºåÁÑ°Ê≥ïÈÄ≤Ë°åÂàÜÊûê');
        }

        // 4. Áç≤Âèñ‰∏ªÊµÅÂà§Ê±∫Ê°à‰æãÁöÑË©≥Á¥∞Êï∏Êìö
        const mainStreamCases = await getMainstreamCasesWithSummary(
            analysisParams.caseDescription,
            analysisParams.courtLevel,
            analysisParams.caseType,
            analysisParams.threshold,
            mainPattern.verdict
        );

        if (mainStreamCases.length < 5) {
            throw new Error('ÊâæÂà∞ÁöÑ‰∏ªÊµÅÂà§Ê±∫Ê°à‰æãÊï∏Èáè‰∏çË∂≥');
        }

        // 5. ‰ΩøÁî® AI ÂàÜÊûê‰∏ªÊµÅÂà§Ê±∫Ê®°Âºè
        const analysisResult = await analyzeMainstreamPattern(
            analysisParams.caseDescription,
            mainStreamCases,
            mainPattern
        );

        // 6. Êõ¥Êñ∞‰ªªÂãôÁãÄÊÖãÁÇ∫ÂÆåÊàê
        await taskRef.update({
            status: 'complete',
            completedAt: admin.firestore.FieldValue.serverTimestamp(),
            result: {
                report: analysisResult,
                analyzedCount: mainStreamCases.length,
                mainPattern: mainPattern,
                originalCaseDescription: analysisParams.caseDescription
            }
        });

        console.log(`[casePrecedentAnalysisService] ‰∏ªÊµÅÂà§Ê±∫ÂàÜÊûêÂÆåÊàêÔºå‰ªªÂãôID: ${taskId}`);

    } catch (error) {
        console.error(`[casePrecedentAnalysisService] ‰∏ªÊµÅÂà§Ê±∫ÂàÜÊûêÂ§±ÊïóÔºå‰ªªÂãôID: ${taskId}`, error);

        await taskRef.update({
            status: 'error',
            error: error.message,
            completedAt: admin.firestore.FieldValue.serverTimestamp()
        });
    }
}
